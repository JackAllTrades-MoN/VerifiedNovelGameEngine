use crate::project::Scene;
use crate::verror::{OrError, OrError_, VError};

use combine::parser::char::{spaces, digit, char};
use combine::{many1, Parser, token, between, choice, parser};
use combine::error::Consumed;
//use combine::stream::easy;

#[derive(Debug, PartialEq, Eq)]
pub enum Action {
    JumpTo(String),
}

#[derive(Debug, PartialEq, Eq)]
pub struct Choice {
    pub name: String,
    pub action: Action,
}

#[derive(Debug, PartialEq, Eq)]
pub enum Instruction {
    UpdateText(String),
    LoadLayout(String),
    SetSelection(Vec<Choice>),
}


impl Instruction {
/*    fn build(name: &str, arg: &str) -> OrError<Instruction> {
        match name {
            "layout" => Ok(Instruction::LoadLayout(arg.to_string())),
            _ => Err(VError::Other("unimplemented operator".to_string()))
        }
    }*/
    fn builder(name: &str) -> OrError<fn(&str) -> Instruction> {
        match name {
            "layout" => Ok(move |arg: &str| Instruction::LoadLayout(arg.to_string())),
            "selection" => Ok(move |_arg: &str| Instruction::SetSelection(vec![])),
            _ => Err(VError::Other("undefined operator".to_string()))
        }
    }
    fn parse_line(scene: &str) -> OrError_<(Instruction, String)> {
        let mut nonsymbol = ||
            combine::satisfy(|c| c != ':' && c != '\\' && c != '[' && c != ']');
        let mut opname =
            many1::<String, _>(nonsymbol())
            .skip(token(':'))
            .map(|op: String| { Instruction::builder(&op) });
        let skip_spaces = || spaces().silent();
        let oparg = many1::<String, _>(nonsymbol())
            .skip(skip_spaces());
        let mut instr =
            between(token('['), token(']'),
                    opname.skip(skip_spaces())
                    .and(oparg)
                    .map(|(build, arg)|
                         build.map(|b| b(&arg))));
                    /*.map(|(name, arg)| Instruction::build(&name?, &arg)));*/
        let mut dialog = many1::<String, _>(nonsymbol())
            .map(|s| Ok(Instruction::UpdateText(s)));
        let mut line = spaces().with(choice((instr, dialog)));
        let (inst, rest) = line.easy_parse(scene)?;
        //let (inst, rest) = instr.easy_parse(scene)?;
        Ok((inst?, rest.to_string()))
    }
    pub fn parse_scene(scene: &Scene) -> OrError<Vec<Instruction>> {
        match scene.body {
            Raw(_) => unimplemented!(),
            Name(path) => {
                let mut scene_str = std::fs::read_to_string(path)?;
                unimplemented!()
            },
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test1() -> OrError<()> {
        let (inst, rest) = Instruction::parse_line("[layout: title.vngl]")?;
        assert_eq!(inst, Instruction::LoadLayout("title.vngl".to_string()));
        assert_eq!(rest, "".to_string());
        Ok(())
    }
    #[test]
    fn test2() -> OrError<()> {
        let (inst, rest) = Instruction::parse_line("[layout:title.vngl]")?;
        assert_eq!(inst, Instruction::LoadLayout("title.vngl".to_string()));
        assert_eq!(rest, "".to_string());
        Ok(())
    }
    #[test]
    fn test3() -> OrError<()> {
        let (inst, rest) = Instruction::parse_line("コマンド以外の文章")?;
        assert_eq!(inst, Instruction::UpdateText("コマンド以外の文章".to_string()));
        assert_eq!(rest, "".to_string());
        Ok(())
    }
    #[test]
    fn test4() -> OrError<()> {
//        let input_txt = "[selection:\n \"はじめから\", scene1;\n \"続きから\", load]";
        let input_txt = r#"
[selection:
 "はじめから", scene1;
 "続きから", load]
"#;
        let (inst, rest) = Instruction::parse_line(&input_txt)?;
        println!("inst4: {:?}", inst);
        assert_eq!(inst, Instruction::SetSelection(vec![]));
        Ok(())
    }
}
